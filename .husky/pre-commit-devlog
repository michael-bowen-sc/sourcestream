#!/bin/sh

# Check if DEVLOG.md is being modified
if git diff --cached --name-only | grep -q "DEVLOG.md"; then
  echo "✅ DEVLOG.md is being updated in this commit. Good job following the documentation guidelines!"
  exit 0
fi

# Check if this is a merge commit or rebase
if git rev-parse -q --verify MERGE_HEAD || [ -f .git/MERGE_MSG ] || [ -f .git/CHERRY_PICK_HEAD ] || [ -f .git/REBASE_HEAD ]; then
  echo "Skipping DEVLOG check for merge/rebase operation"
  exit 0
fi

# Get the list of files being committed
STAGED_FILES=$(git diff --cached --name-only)

# If no files are being committed, exit
if [ -z "$STAGED_FILES" ]; then
  exit 0
fi

# Check if there are code changes that should be documented
CODE_CHANGES=false
echo "$STAGED_FILES" | grep -qE "\.(go|js|jsx|ts|tsx|css|html)$" && CODE_CHANGES=true

if [ "$CODE_CHANGES" = true ]; then
  echo "⚠️ Warning: You're committing code changes without updating DEVLOG.md"
  echo "Please consider adding an entry to DEVLOG.md to document your changes."
  echo "This helps maintain a record of development decisions and insights."
  echo ""
  echo "You can continue with this commit by pressing 'y', or cancel with any other key to update DEVLOG.md first."
  
  # Get user input
  exec < /dev/tty
  read -p "Continue without updating DEVLOG.md? (y/n) " response
  
  if [ "$response" != "y" ]; then
    echo "Commit aborted. Please update DEVLOG.md and try again."
    exit 1
  fi
  
  echo "Continuing with commit without DEVLOG update."
fi

exit 0
