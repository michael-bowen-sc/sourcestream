// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_RegisterContributor_FullMethodName = "/backend.UserService/RegisterContributor"
	UserService_GetContributor_FullMethodName      = "/backend.UserService/GetContributor"
	UserService_GetUserProfile_FullMethodName      = "/backend.UserService/GetUserProfile"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User management service
type UserServiceClient interface {
	RegisterContributor(ctx context.Context, in *RegisterContributorRequest, opts ...grpc.CallOption) (*RegisterContributorResponse, error)
	GetContributor(ctx context.Context, in *GetContributorRequest, opts ...grpc.CallOption) (*GetContributorResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterContributor(ctx context.Context, in *RegisterContributorRequest, opts ...grpc.CallOption) (*RegisterContributorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterContributorResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterContributor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetContributor(ctx context.Context, in *GetContributorRequest, opts ...grpc.CallOption) (*GetContributorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContributorResponse)
	err := c.cc.Invoke(ctx, UserService_GetContributor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// User management service
type UserServiceServer interface {
	RegisterContributor(context.Context, *RegisterContributorRequest) (*RegisterContributorResponse, error)
	GetContributor(context.Context, *GetContributorRequest) (*GetContributorResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) RegisterContributor(context.Context, *RegisterContributorRequest) (*RegisterContributorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterContributor not implemented")
}
func (UnimplementedUserServiceServer) GetContributor(context.Context, *GetContributorRequest) (*GetContributorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributor not implemented")
}
func (UnimplementedUserServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterContributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterContributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterContributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterContributor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterContributor(ctx, req.(*RegisterContributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetContributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetContributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetContributor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetContributor(ctx, req.(*GetContributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterContributor",
			Handler:    _UserService_RegisterContributor_Handler,
		},
		{
			MethodName: "GetContributor",
			Handler:    _UserService_GetContributor_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}

const (
	ProjectService_GetAuthoredProjects_FullMethodName    = "/backend.ProjectService/GetAuthoredProjects"
	ProjectService_GetContributedProjects_FullMethodName = "/backend.ProjectService/GetContributedProjects"
	ProjectService_GetApprovedProjects_FullMethodName    = "/backend.ProjectService/GetApprovedProjects"
	ProjectService_CreateProject_FullMethodName          = "/backend.ProjectService/CreateProject"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Project management service
type ProjectServiceClient interface {
	GetAuthoredProjects(ctx context.Context, in *GetAuthoredProjectsRequest, opts ...grpc.CallOption) (*GetAuthoredProjectsResponse, error)
	GetContributedProjects(ctx context.Context, in *GetContributedProjectsRequest, opts ...grpc.CallOption) (*GetContributedProjectsResponse, error)
	GetApprovedProjects(ctx context.Context, in *GetApprovedProjectsRequest, opts ...grpc.CallOption) (*GetApprovedProjectsResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetAuthoredProjects(ctx context.Context, in *GetAuthoredProjectsRequest, opts ...grpc.CallOption) (*GetAuthoredProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthoredProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_GetAuthoredProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetContributedProjects(ctx context.Context, in *GetContributedProjectsRequest, opts ...grpc.CallOption) (*GetContributedProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContributedProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_GetContributedProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetApprovedProjects(ctx context.Context, in *GetApprovedProjectsRequest, opts ...grpc.CallOption) (*GetApprovedProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApprovedProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_GetApprovedProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility.
//
// Project management service
type ProjectServiceServer interface {
	GetAuthoredProjects(context.Context, *GetAuthoredProjectsRequest) (*GetAuthoredProjectsResponse, error)
	GetContributedProjects(context.Context, *GetContributedProjectsRequest) (*GetContributedProjectsResponse, error)
	GetApprovedProjects(context.Context, *GetApprovedProjectsRequest) (*GetApprovedProjectsResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectServiceServer struct{}

func (UnimplementedProjectServiceServer) GetAuthoredProjects(context.Context, *GetAuthoredProjectsRequest) (*GetAuthoredProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthoredProjects not implemented")
}
func (UnimplementedProjectServiceServer) GetContributedProjects(context.Context, *GetContributedProjectsRequest) (*GetContributedProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributedProjects not implemented")
}
func (UnimplementedProjectServiceServer) GetApprovedProjects(context.Context, *GetApprovedProjectsRequest) (*GetApprovedProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovedProjects not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}
func (UnimplementedProjectServiceServer) testEmbeddedByValue()                        {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedProjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetAuthoredProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthoredProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetAuthoredProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetAuthoredProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetAuthoredProjects(ctx, req.(*GetAuthoredProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetContributedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributedProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetContributedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetContributedProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetContributedProjects(ctx, req.(*GetContributedProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetApprovedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovedProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetApprovedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetApprovedProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetApprovedProjects(ctx, req.(*GetApprovedProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthoredProjects",
			Handler:    _ProjectService_GetAuthoredProjects_Handler,
		},
		{
			MethodName: "GetContributedProjects",
			Handler:    _ProjectService_GetContributedProjects_Handler,
		},
		{
			MethodName: "GetApprovedProjects",
			Handler:    _ProjectService_GetApprovedProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}

const (
	RequestService_SubmitProjectRequest_FullMethodName      = "/backend.RequestService/SubmitProjectRequest"
	RequestService_SubmitPullRequestApproval_FullMethodName = "/backend.RequestService/SubmitPullRequestApproval"
	RequestService_SubmitAccessRequest_FullMethodName       = "/backend.RequestService/SubmitAccessRequest"
	RequestService_GetRequests_FullMethodName               = "/backend.RequestService/GetRequests"
)

// RequestServiceClient is the client API for RequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Request management service
type RequestServiceClient interface {
	SubmitProjectRequest(ctx context.Context, in *SubmitProjectRequestRequest, opts ...grpc.CallOption) (*SubmitProjectRequestResponse, error)
	SubmitPullRequestApproval(ctx context.Context, in *SubmitPullRequestApprovalRequest, opts ...grpc.CallOption) (*SubmitPullRequestApprovalResponse, error)
	SubmitAccessRequest(ctx context.Context, in *SubmitAccessRequestRequest, opts ...grpc.CallOption) (*SubmitAccessRequestResponse, error)
	GetRequests(ctx context.Context, in *GetRequestsRequest, opts ...grpc.CallOption) (*GetRequestsResponse, error)
}

type requestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestServiceClient(cc grpc.ClientConnInterface) RequestServiceClient {
	return &requestServiceClient{cc}
}

func (c *requestServiceClient) SubmitProjectRequest(ctx context.Context, in *SubmitProjectRequestRequest, opts ...grpc.CallOption) (*SubmitProjectRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitProjectRequestResponse)
	err := c.cc.Invoke(ctx, RequestService_SubmitProjectRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) SubmitPullRequestApproval(ctx context.Context, in *SubmitPullRequestApprovalRequest, opts ...grpc.CallOption) (*SubmitPullRequestApprovalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitPullRequestApprovalResponse)
	err := c.cc.Invoke(ctx, RequestService_SubmitPullRequestApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) SubmitAccessRequest(ctx context.Context, in *SubmitAccessRequestRequest, opts ...grpc.CallOption) (*SubmitAccessRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAccessRequestResponse)
	err := c.cc.Invoke(ctx, RequestService_SubmitAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) GetRequests(ctx context.Context, in *GetRequestsRequest, opts ...grpc.CallOption) (*GetRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRequestsResponse)
	err := c.cc.Invoke(ctx, RequestService_GetRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServiceServer is the server API for RequestService service.
// All implementations must embed UnimplementedRequestServiceServer
// for forward compatibility.
//
// Request management service
type RequestServiceServer interface {
	SubmitProjectRequest(context.Context, *SubmitProjectRequestRequest) (*SubmitProjectRequestResponse, error)
	SubmitPullRequestApproval(context.Context, *SubmitPullRequestApprovalRequest) (*SubmitPullRequestApprovalResponse, error)
	SubmitAccessRequest(context.Context, *SubmitAccessRequestRequest) (*SubmitAccessRequestResponse, error)
	GetRequests(context.Context, *GetRequestsRequest) (*GetRequestsResponse, error)
	mustEmbedUnimplementedRequestServiceServer()
}

// UnimplementedRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRequestServiceServer struct{}

func (UnimplementedRequestServiceServer) SubmitProjectRequest(context.Context, *SubmitProjectRequestRequest) (*SubmitProjectRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProjectRequest not implemented")
}
func (UnimplementedRequestServiceServer) SubmitPullRequestApproval(context.Context, *SubmitPullRequestApprovalRequest) (*SubmitPullRequestApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPullRequestApproval not implemented")
}
func (UnimplementedRequestServiceServer) SubmitAccessRequest(context.Context, *SubmitAccessRequestRequest) (*SubmitAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAccessRequest not implemented")
}
func (UnimplementedRequestServiceServer) GetRequests(context.Context, *GetRequestsRequest) (*GetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequests not implemented")
}
func (UnimplementedRequestServiceServer) mustEmbedUnimplementedRequestServiceServer() {}
func (UnimplementedRequestServiceServer) testEmbeddedByValue()                        {}

// UnsafeRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServiceServer will
// result in compilation errors.
type UnsafeRequestServiceServer interface {
	mustEmbedUnimplementedRequestServiceServer()
}

func RegisterRequestServiceServer(s grpc.ServiceRegistrar, srv RequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RequestService_ServiceDesc, srv)
}

func _RequestService_SubmitProjectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitProjectRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).SubmitProjectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_SubmitProjectRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).SubmitProjectRequest(ctx, req.(*SubmitProjectRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_SubmitPullRequestApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPullRequestApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).SubmitPullRequestApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_SubmitPullRequestApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).SubmitPullRequestApproval(ctx, req.(*SubmitPullRequestApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_SubmitAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).SubmitAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_SubmitAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).SubmitAccessRequest(ctx, req.(*SubmitAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_GetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_GetRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetRequests(ctx, req.(*GetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestService_ServiceDesc is the grpc.ServiceDesc for RequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.RequestService",
	HandlerType: (*RequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProjectRequest",
			Handler:    _RequestService_SubmitProjectRequest_Handler,
		},
		{
			MethodName: "SubmitPullRequestApproval",
			Handler:    _RequestService_SubmitPullRequestApproval_Handler,
		},
		{
			MethodName: "SubmitAccessRequest",
			Handler:    _RequestService_SubmitAccessRequest_Handler,
		},
		{
			MethodName: "GetRequests",
			Handler:    _RequestService_GetRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
